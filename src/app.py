"""
Streamlit app ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu theo d√µi th·ªã tr∆∞·ªùng ti·ªÅn s·ªë
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import altair as alt
from datetime import datetime, timedelta
import time

# Import c√°c modules t·ª´ d·ª± √°n
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.data_collector.market_data import MarketDataCollector
from src.analyzer.trend_analyzer import TrendAnalyzer
from src.visualization.data_processor import DataVisualizer
from config import MONITORING_CONFIG

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="Crypto Market Monitor",
    page_icon="üìä",
    layout="wide"
)

# Kh·ªüi t·∫°o c√°c components
data_collector = MarketDataCollector()
analyzer = TrendAnalyzer()
visualizer = DataVisualizer()

# Ti√™u ƒë·ªÅ
st.title("üöÄ Crypto Market Monitor")
st.markdown("---")

# T·∫°o columns cho layout
col1, col2 = st.columns([2, 1])

# H√†m c·∫≠p nh·∫≠t d·ªØ li·ªáu
def update_data():
    with st.spinner("ƒêang c·∫≠p nh·∫≠t d·ªØ li·ªáu..."):
        # Thu th·∫≠p v√† ph√¢n t√≠ch d·ªØ li·ªáu
        market_data = data_collector.collect_data()
        trends = analyzer.analyze(market_data)
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu cho visualization
        market_df = visualizer.prepare_market_data(market_data)
        current_trends, history_trends = visualizer.prepare_trend_data(trends)
        
        return market_df, current_trends, history_trends

# Main dashboard
with col1:
    st.subheader("üìà Xu h∆∞·ªõng th·ªã tr∆∞·ªùng")
    
    # N√∫t refresh
    if st.button("üîÑ C·∫≠p nh·∫≠t d·ªØ li·ªáu"):
        try:
            market_df, current_trends, history_trends = update_data()
            
            # L∆∞u v√†o session state
            st.session_state['market_data'] = market_df
            st.session_state['current_trends'] = current_trends
            st.session_state['history_trends'] = history_trends
            
            st.success("ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu th√†nh c√¥ng!")
        except Exception as e:
            st.error(f"L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu: {str(e)}")
    
    # Hi·ªÉn th·ªã xu h∆∞·ªõng hi·ªán t·∫°i
    if 'current_trends' in st.session_state and not st.session_state['current_trends'].empty:
        trends_df = st.session_state['current_trends']
        
        # Bi·ªÉu ƒë·ªì xu h∆∞·ªõng
        chart = alt.Chart(trends_df).mark_circle().encode(
            x='price_change',
            y='volume_change',
            size='price',
            color='symbol',
            tooltip=['symbol', 'price', 'price_change', 'volume_change']
        ).interactive()
        
        st.altair_chart(chart, use_container_width=True)
        
        # B·∫£ng chi ti·∫øt
        st.dataframe(
            trends_df[['symbol', 'price', 'price_change', 'volume_change', 'exchanges']],
            use_container_width=True
        )
    else:
        st.info("Nh·∫•n n√∫t 'C·∫≠p nh·∫≠t d·ªØ li·ªáu' ƒë·ªÉ xem xu h∆∞·ªõng m·ªõi nh·∫•t")

# Sidebar v·ªõi th·ªëng k√™
with col2:
    st.subheader("üìä Th·ªëng k√™")
    
    if 'market_data' in st.session_state:
        stats = visualizer.get_trend_statistics()
        
        # Hi·ªÉn th·ªã c√°c metrics
        st.metric(
            label="T·ªïng s·ªë c·∫£nh b√°o",
            value=stats.get('total_alerts', 0)
        )
        
        st.metric(
            label="Thay ƒë·ªïi gi√° trung b√¨nh",
            value=f"{stats.get('avg_price_change', 0):.2f}%"
        )
        
        st.metric(
            label="Thay ƒë·ªïi volume trung b√¨nh",
            value=f"{stats.get('avg_volume_change', 0):.2f}%"
        )
        
        # Top coins ƒë∆∞·ª£c theo d√µi nhi·ªÅu nh·∫•t
        st.subheader("üî• Coins n·ªïi b·∫≠t")
        most_active_coins = stats.get('most_active_coins', {})
        if most_active_coins:
            for coin, count in most_active_coins.items():
                st.write(f"{coin}: {count} c·∫£nh b√°o")
        else:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu xu h∆∞·ªõng. H√£y ƒë·ª£i v√†i l·∫ßn c·∫≠p nh·∫≠t.")
    
    # Hi·ªÉn th·ªã c·∫•u h√¨nh hi·ªán t·∫°i
    st.subheader("‚öôÔ∏è C·∫•u h√¨nh")
    st.write("Ng∆∞·ª°ng theo d√µi:")
    st.write(f"- Thay ƒë·ªïi gi√°: {MONITORING_CONFIG['price_change_threshold']}%")
    st.write(f"- Thay ƒë·ªïi volume: {MONITORING_CONFIG['volume_change_threshold']}%")
    st.write(f"- C·∫≠p nh·∫≠t m·ªói: {MONITORING_CONFIG['update_interval']} gi√¢y")

# Auto refresh
if st.checkbox("T·ª± ƒë·ªông c·∫≠p nh·∫≠t"):
    time_placeholder = st.empty()
    error_placeholder = st.empty()
    try:
        while True:
            try:
                market_df, current_trends, history_trends = update_data()
                st.session_state['market_data'] = market_df
                st.session_state['current_trends'] = current_trends
                st.session_state['history_trends'] = history_trends
                
                time_placeholder.text(f"L·∫ßn c·∫≠p nh·∫≠t cu·ªëi: {datetime.now().strftime('%H:%M:%S')}")
                error_placeholder.empty()  # X√≥a th√¥ng b√°o l·ªói n·∫øu c√≥
            except Exception as e:
                error_placeholder.error(f"L·ªói khi c·∫≠p nh·∫≠t: {str(e)}")
            
            time.sleep(MONITORING_CONFIG['update_interval'])
    except Exception as e:
        st.error(f"L·ªói h·ªá th·ªëng: {str(e)}")